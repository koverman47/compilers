CAPS : CAPS is a token (terminal) made up of one or more characters.  
small case symbols are non-terminals.

/* Program - Kirby Overman */
program           -> PROGRAM id BEGIN pgm_body END 
id                -> IDENTIFIER
pgm_body          -> decl func_declarations
decl		        -> string_decl decl | var_decl decl | empty

/* Global String Declaration - Kirby Overman*/
string_decl       -> STRING id := str ;
str               -> STRINGLITERAL

/* Variable Declaration - Kirby Overman */
var_decl          -> var_type id_list ;
var_type	        -> FLOAT | INT
any_type          -> var_type | VOID 
id_list           -> id id_tail
id_tail           -> , id id_tail | empty

/* Function Paramater List - Kirby Overman */
param_decl_list   -> param_decl param_decl_tail | empty
param_decl        -> var_type id
param_decl_tail   -> , param_decl param_decl_tail | empty

/* Function Declarations - Kirby Overman */
func_declarations -> func_decl func_declarations | empty
func_decl         -> FUNCTION any_type id (param_decl_list) BEGIN func_body END
func_body         -> decl stmt_list 

/* Statement List * - Carsen Ball/
stmt_list         -> stmt stmt_list | empty
stmt              -> base_stmt | if_stmt | while_stmt
base_stmt         -> assign_stmt | read_stmt | write_stmt | return_stmt

/* Basic Statements * - Carsen Ball/
assign_stmt       -> assign_expr ;
assign_expr       -> id := expr /* 'STOREI or STOREF expr id' functon used here/
read_stmt         -> READ ( id_list ); /* READI(integer), READf(float), or READS(string)/
write_stmt        -> WRITE ( id_list ); /* WRITEI(integer), WRITEF(float), or WRITES(string)/
return_stmt       -> RETURN expr ;

/* Expressions * - Carsen Ball/
expr              -> expr_prefix factor
expr_prefix       -> expr_prefix factor addop | empty
factor            -> factor_prefix postfix_expr
factor_prefix     -> factor_prefix postfix_expr mulop | empty
postfix_expr      -> primary | call_expr
call_expr         -> id ( expr_list )
expr_list         -> expr expr_list_tail | empty
expr_list_tail    -> , expr expr_list_tail | empty
primary           -> ( expr ) | id | INTLITERAL | FLOATLITERAL
addop             -> + | - /* check symbol then use SUBF or ADDF/
mulop             -> * | / /* check symbol then use MULTF or DIVF/

/* Complex Statements and Condition * Carsen Ball/ 
if_stmt           -> IF ( cond ) decl stmt_list else_part ENDIF
else_part         -> ELSE decl stmt_list | empty
cond              -> expr compop expr
compop            -> < | > | = | != | <= | >=

/* While statements * Carsen Ball/
while_stmt       -> WHILE ( cond ) decl stmt_list ENDWHILE

------
//
an IDENTIFIER token will begin with a letter, and be followed by any number of letters and numbers.  
IDENTIFIERS are case sensitive. 

/*Literals* Josh Cullings/
INTLITERAL: integer number 
            ex) 0, 123, 678
            
FLOATLITERAL: floating point number available in two different format
                yyyy.xxxxxx or .xxxxxxx
            ex) 3.141592 , .1414 , .0001 , 456.98

STRINGLITERAL: any sequence of characters except '"' 
            between '"' and '"' 
            ex) "Hello world!" , "***********" , "this is a string"
            
/*Comments* Josh Cullings/
COMMENT:
      Starts with "--" and lasts till the end of line
      ex) -- this is a comment
      ex) -- any thing after the "--" is ignored 

/*Keywords* Josh Cullings/
Keywords

PROGRAM,BEGIN,END,FUNCTION,READ,WRITE,
IF,ELSE,ENDIF,WHILE,ENDWHILE,CONTINUE,BREAK,
RETURN,INT,VOID,STRING,FLOAT

/*Operators* Josh Cullings/
Operators
:= + - * / = != < > ( ) ; , <= >=

